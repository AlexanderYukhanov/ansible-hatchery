------------------------------- Application Gateway
  delete
  get
  create_or_update
  update_tags
  list
  list_all
  start
  stop
  backend_health
  list_available_waf_rule_sets
  list_available_ssl_options
  list_available_ssl_predefined_policies
  get_ssl_predefined_policy
  ** CREATING MAIN MODULE
Getting example for: get
Getting example for: create_or_update
  ** CREATING FACT MODULE
Getting example for: get
  resource name fields: application_gateway_name application_gateway_name name
------------------------------- Application Gateway
  delete
  get
  create_or_update
  list_all
  list
  ** CREATING MAIN MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "test-asg",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationSecurityGroups/test-asg",
  "type": "Microsoft.Network/applicationSecurityGroups",
  "location": "westus",
  "properties": {
    "provisioningState": "Succeeded",
    "resourceGuid": "00000000-0000-0000-0000-000000000000"
  },
  "provisioningState": "Succeeded",
  "resourceGuid": "00000000-0000-0000-0000-000000000000"
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "name": "test-asg",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationSecurityGroups/test-asg",
  "type": "Microsoft.Network/applicationSecurityGroups",
  "location": "westus",
  "properties": {
    "provisioningState": "Succeeded",
    "resourceGuid": "00000000-0000-0000-0000-000000000000"
  },
  "provisioningState": "Succeeded",
  "resourceGuid": "00000000-0000-0000-0000-000000000000"
}
  ** CREATING FACT MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "test-asg",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationSecurityGroups/test-asg",
  "type": "Microsoft.Network/applicationSecurityGroups",
  "location": "westus",
  "properties": {
    "provisioningState": "Succeeded",
    "resourceGuid": "00000000-0000-0000-0000-000000000000"
  },
  "provisioningState": "Succeeded",
  "resourceGuid": "00000000-0000-0000-0000-000000000000"
}
  resource name fields: application_security_group_name application_security_group_name name
------------------------------- Application Security Group
  check_dns_name_availability
-------------------------------
  list
------------------------------- Available Endpoint Service
  delete
  get
  create_or_update
  list
  ** CREATING MAIN MODULE
Getting example for: get
Getting example for: create_or_update
  ** CREATING FACT MODULE
Getting example for: get
  resource name fields: express_route_circuit_authorization_name authorization_name name
------------------------------- Express Route Circuit Authorization
  delete
  get
  create_or_update
  list
  ** CREATING MAIN MODULE
Getting example for: get
Getting example for: create_or_update
  ** CREATING FACT MODULE
Getting example for: get
  resource name fields: express_route_circuit_peering_name peering_name name
------------------------------- Express Route Circuit Peering
  delete
  get
  create_or_update
  update_tags
  list_arp_table
  list_routes_table
  list_routes_table_summary
  get_stats
  get_peering_stats
  list
  list_all
  ** CREATING MAIN MODULE
Getting example for: get
Getting example for: create_or_update
  ** CREATING FACT MODULE
Getting example for: get
  resource name fields: express_route_circuit_name circuit_name name
------------------------------- Express Route Circuit
  list
------------------------------- Express Route Service Provider
  delete
  get
  create_or_update
  update_tags
  list_all
  list
  ** CREATING MAIN MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "lb",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb",
  "type": "Microsoft.Network/loadBalancers",
  "location": "westus",
  "sku": {
    "name": "Basic"
  },
  "properties": {
    "provisioningState": "Succeeded",
    "frontendIPConfigurations": [
      {
        "name": "fe-lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
        "properties": {
          "provisioningState": "Succeeded",
          "privateIPAddress": "10.0.1.4",
          "privateIPAllocationMethod": "Dynamic",
          "subnet": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
          },
          "loadBalancingRules": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
            }
          ],
          "inboundNatRules": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"
            }
          ]
        }
      }
    ],
    "backendAddressPools": [
      {
        "name": "be-lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
        "properties": {
          "provisioningState": "Succeeded",
          "loadBalancingRules": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
            }
          ]
        }
      }
    ],
    "loadBalancingRules": [
      {
        "name": "rulelb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb",
        "properties": {
          "provisioningState": "Succeeded",
          "frontendIPConfiguration": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
          },
          "frontendPort": "80",
          "backendPort": "80",
          "enableFloatingIP": true,
          "idleTimeoutInMinutes": "15",
          "protocol": "Tcp",
          "loadDistribution": "Default",
          "backendAddressPool": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
          },
          "probe": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
          },
          "disableOutboundSnat": false
        }
      }
    ],
    "probes": [
      {
        "name": "probe-lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
        "properties": {
          "provisioningState": "Succeeded",
          "protocol": "Http",
          "port": "80",
          "requestPath": "healthcheck.aspx",
          "intervalInSeconds": "15",
          "numberOfProbes": "2",
          "loadBalancingRules": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
            }
          ]
        }
      }
    ],
    "inboundNatRules": [
      {
        "name": "in-nat-rule",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule",
        "properties": {
          "provisioningState": "Succeeded",
          "frontendIPConfiguration": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
          },
          "frontendPort": "3389",
          "backendPort": "3389",
          "enableFloatingIP": true,
          "idleTimeoutInMinutes": "15",
          "protocol": "Tcp"
        }
      }
    ],
    "outboundNatRules": [],
    "inboundNatPools": []
  },
  "provisioningState": "Succeeded",
  "frontendIPConfigurations": [
    {
      "name": "fe-lb",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
      "properties": {
        "provisioningState": "Succeeded",
        "privateIPAddress": "10.0.1.4",
        "privateIPAllocationMethod": "Dynamic",
        "subnet": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
        },
        "loadBalancingRules": [
          {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
          }
        ],
        "inboundNatRules": [
          {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"
          }
        ]
      }
    }
  ],
  "backendAddressPools": [
    {
      "name": "be-lb",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
      "properties": {
        "provisioningState": "Succeeded",
        "loadBalancingRules": [
          {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
          }
        ]
      }
    }
  ],
  "loadBalancingRules": [
    {
      "name": "rulelb",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb",
      "properties": {
        "provisioningState": "Succeeded",
        "frontendIPConfiguration": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
        },
        "frontendPort": "80",
        "backendPort": "80",
        "enableFloatingIP": true,
        "idleTimeoutInMinutes": "15",
        "protocol": "Tcp",
        "loadDistribution": "Default",
        "backendAddressPool": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
        },
        "probe": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
        },
        "disableOutboundSnat": false
      }
    }
  ],
  "probes": [
    {
      "name": "probe-lb",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
      "properties": {
        "provisioningState": "Succeeded",
        "protocol": "Http",
        "port": "80",
        "requestPath": "healthcheck.aspx",
        "intervalInSeconds": "15",
        "numberOfProbes": "2",
        "loadBalancingRules": [
          {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
          }
        ]
      }
    }
  ],
  "inboundNatRules": [
    {
      "name": "in-nat-rule",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule",
      "properties": {
        "provisioningState": "Succeeded",
        "frontendIPConfiguration": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
        },
        "frontendPort": "3389",
        "backendPort": "3389",
        "enableFloatingIP": true,
        "idleTimeoutInMinutes": "15",
        "protocol": "Tcp"
      }
    }
  ],
  "outboundNatRules": [],
  "inboundNatPools": []
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "name": "lb",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb",
  "type": "Microsoft.Network/loadBalancers",
  "location": "westus",
  "sku": {
    "name": "Basic"
  },
  "properties": {
    "provisioningState": "Succeeded",
    "frontendIPConfigurations": [
      {
        "name": "fe-lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
        "properties": {
          "provisioningState": "Succeeded",
          "privateIPAddress": "10.0.1.4",
          "privateIPAllocationMethod": "Dynamic",
          "subnet": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
          },
          "loadBalancingRules": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
            }
          ],
          "inboundNatRules": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"
            }
          ]
        }
      }
    ],
    "backendAddressPools": [
      {
        "name": "be-lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
        "properties": {
          "provisioningState": "Succeeded",
          "loadBalancingRules": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
            }
          ]
        }
      }
    ],
    "loadBalancingRules": [
      {
        "name": "rulelb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb",
        "properties": {
          "provisioningState": "Succeeded",
          "frontendIPConfiguration": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
          },
          "frontendPort": "80",
          "backendPort": "80",
          "enableFloatingIP": true,
          "idleTimeoutInMinutes": "15",
          "protocol": "Tcp",
          "loadDistribution": "Default",
          "backendAddressPool": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
          },
          "probe": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
          },
          "disableOutboundSnat": false
        }
      }
    ],
    "probes": [
      {
        "name": "probe-lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
        "properties": {
          "provisioningState": "Succeeded",
          "protocol": "Http",
          "port": "80",
          "requestPath": "healthcheck.aspx",
          "intervalInSeconds": "15",
          "numberOfProbes": "2",
          "loadBalancingRules": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
            }
          ]
        }
      }
    ],
    "inboundNatRules": [
      {
        "name": "in-nat-rule",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule",
        "properties": {
          "provisioningState": "Succeeded",
          "frontendIPConfiguration": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
          },
          "frontendPort": "3389",
          "backendPort": "3389",
          "enableFloatingIP": true,
          "idleTimeoutInMinutes": "15",
          "protocol": "Tcp"
        }
      }
    ],
    "outboundNatRules": [],
    "inboundNatPools": []
  },
  "provisioningState": "Succeeded",
  "frontendIPConfigurations": [
    {
      "name": "fe-lb",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
      "properties": {
        "provisioningState": "Succeeded",
        "privateIPAddress": "10.0.1.4",
        "privateIPAllocationMethod": "Dynamic",
        "subnet": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
        },
        "loadBalancingRules": [
          {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
          }
        ],
        "inboundNatRules": [
          {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"
          }
        ]
      }
    }
  ],
  "backendAddressPools": [
    {
      "name": "be-lb",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
      "properties": {
        "provisioningState": "Succeeded",
        "loadBalancingRules": [
          {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
          }
        ]
      }
    }
  ],
  "loadBalancingRules": [
    {
      "name": "rulelb",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb",
      "properties": {
        "provisioningState": "Succeeded",
        "frontendIPConfiguration": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
        },
        "frontendPort": "80",
        "backendPort": "80",
        "enableFloatingIP": true,
        "idleTimeoutInMinutes": "15",
        "protocol": "Tcp",
        "loadDistribution": "Default",
        "backendAddressPool": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
        },
        "probe": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
        },
        "disableOutboundSnat": false
      }
    }
  ],
  "probes": [
    {
      "name": "probe-lb",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
      "properties": {
        "provisioningState": "Succeeded",
        "protocol": "Http",
        "port": "80",
        "requestPath": "healthcheck.aspx",
        "intervalInSeconds": "15",
        "numberOfProbes": "2",
        "loadBalancingRules": [
          {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
          }
        ]
      }
    }
  ],
  "inboundNatRules": [
    {
      "name": "in-nat-rule",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule",
      "properties": {
        "provisioningState": "Succeeded",
        "frontendIPConfiguration": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
        },
        "frontendPort": "3389",
        "backendPort": "3389",
        "enableFloatingIP": true,
        "idleTimeoutInMinutes": "15",
        "protocol": "Tcp"
      }
    }
  ],
  "outboundNatRules": [],
  "inboundNatPools": []
}
  ** CREATING FACT MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "lb",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb",
  "type": "Microsoft.Network/loadBalancers",
  "location": "westus",
  "sku": {
    "name": "Basic"
  },
  "properties": {
    "provisioningState": "Succeeded",
    "frontendIPConfigurations": [
      {
        "name": "fe-lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
        "properties": {
          "provisioningState": "Succeeded",
          "privateIPAddress": "10.0.1.4",
          "privateIPAllocationMethod": "Dynamic",
          "subnet": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
          },
          "loadBalancingRules": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
            }
          ],
          "inboundNatRules": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"
            }
          ]
        }
      }
    ],
    "backendAddressPools": [
      {
        "name": "be-lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
        "properties": {
          "provisioningState": "Succeeded",
          "loadBalancingRules": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
            }
          ]
        }
      }
    ],
    "loadBalancingRules": [
      {
        "name": "rulelb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb",
        "properties": {
          "provisioningState": "Succeeded",
          "frontendIPConfiguration": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
          },
          "frontendPort": "80",
          "backendPort": "80",
          "enableFloatingIP": true,
          "idleTimeoutInMinutes": "15",
          "protocol": "Tcp",
          "loadDistribution": "Default",
          "backendAddressPool": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
          },
          "probe": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
          },
          "disableOutboundSnat": false
        }
      }
    ],
    "probes": [
      {
        "name": "probe-lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
        "properties": {
          "provisioningState": "Succeeded",
          "protocol": "Http",
          "port": "80",
          "requestPath": "healthcheck.aspx",
          "intervalInSeconds": "15",
          "numberOfProbes": "2",
          "loadBalancingRules": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
            }
          ]
        }
      }
    ],
    "inboundNatRules": [
      {
        "name": "in-nat-rule",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule",
        "properties": {
          "provisioningState": "Succeeded",
          "frontendIPConfiguration": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
          },
          "frontendPort": "3389",
          "backendPort": "3389",
          "enableFloatingIP": true,
          "idleTimeoutInMinutes": "15",
          "protocol": "Tcp"
        }
      }
    ],
    "outboundNatRules": [],
    "inboundNatPools": []
  },
  "provisioningState": "Succeeded",
  "frontendIPConfigurations": [
    {
      "name": "fe-lb",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
      "properties": {
        "provisioningState": "Succeeded",
        "privateIPAddress": "10.0.1.4",
        "privateIPAllocationMethod": "Dynamic",
        "subnet": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
        },
        "loadBalancingRules": [
          {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
          }
        ],
        "inboundNatRules": [
          {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"
          }
        ]
      }
    }
  ],
  "backendAddressPools": [
    {
      "name": "be-lb",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
      "properties": {
        "provisioningState": "Succeeded",
        "loadBalancingRules": [
          {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
          }
        ]
      }
    }
  ],
  "loadBalancingRules": [
    {
      "name": "rulelb",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb",
      "properties": {
        "provisioningState": "Succeeded",
        "frontendIPConfiguration": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
        },
        "frontendPort": "80",
        "backendPort": "80",
        "enableFloatingIP": true,
        "idleTimeoutInMinutes": "15",
        "protocol": "Tcp",
        "loadDistribution": "Default",
        "backendAddressPool": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
        },
        "probe": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
        },
        "disableOutboundSnat": false
      }
    }
  ],
  "probes": [
    {
      "name": "probe-lb",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
      "properties": {
        "provisioningState": "Succeeded",
        "protocol": "Http",
        "port": "80",
        "requestPath": "healthcheck.aspx",
        "intervalInSeconds": "15",
        "numberOfProbes": "2",
        "loadBalancingRules": [
          {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
          }
        ]
      }
    }
  ],
  "inboundNatRules": [
    {
      "name": "in-nat-rule",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule",
      "properties": {
        "provisioningState": "Succeeded",
        "frontendIPConfiguration": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
        },
        "frontendPort": "3389",
        "backendPort": "3389",
        "enableFloatingIP": true,
        "idleTimeoutInMinutes": "15",
        "protocol": "Tcp"
      }
    }
  ],
  "outboundNatRules": [],
  "inboundNatPools": []
}
  resource name fields: load_balancer_name load_balancer_name name
------------------------------- Load Balancer
  list
  get
  ** CREATING FACT MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "backend",
  "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/backend",
  "etag": "W/\\\"00000000-0000-0000-0000-000000000000\\\"",
  "properties": {
    "provisioningState": "Succeeded",
    "backendIPConfigurations": [
      {
        "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkInterfaces/nic/ipConfigurations/default-ip-config"
      }
    ],
    "loadBalancingRules": [
      {
        "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
      }
    ]
  },
  "provisioningState": "Succeeded",
  "backendIPConfigurations": [
    {
      "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkInterfaces/nic/ipConfigurations/default-ip-config"
    }
  ],
  "loadBalancingRules": [
    {
      "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
    }
  ]
}
  resource name fields: load_balancer_backend_address_pool_name backend_address_pool_name name
------------------------------- Load Balancer Backend Address Pool
  list
  get
  ** CREATING FACT MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "frontend",
  "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/frontend",
  "etag": "W/\\\"00000000-0000-0000-0000-000000000000\\\"",
  "properties": {
    "provisioningState": "Succeeded",
    "privateIPAddress": "10.0.1.4",
    "privateIPAllocationMethod": "Dynamic",
    "subnet": {
      "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
    },
    "loadBalancingRules": [
      {
        "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
      }
    ],
    "inboundNatRules": [
      {
        "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/inrlb"
      }
    ]
  },
  "provisioningState": "Succeeded",
  "privateIPAddress": "10.0.1.4",
  "privateIPAllocationMethod": "Dynamic",
  "subnet": {
    "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
  },
  "loadBalancingRules": [
    {
      "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
    }
  ],
  "inboundNatRules": [
    {
      "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/inrlb"
    }
  ]
}
  resource name fields: load_balancer_frontend_ip_configuration_name frontend_ip_configuration_name name
------------------------------- Load Balancer Frontend I P Configuration
  list
  delete
  get
  create_or_update
  ** CREATING MAIN MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "natRule1.1",
  "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natRule1.1",
  "properties": {
    "provisioningState": "Succeeded",
    "frontendIPConfiguration": {
      "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/frontendIPConfigurations/ip1"
    },
    "frontendPort": "3390",
    "backendPort": "3389",
    "enableFloatingIP": false,
    "idleTimeoutInMinutes": "4",
    "protocol": "Tcp",
    "backendIPConfiguration": {
      "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1"
    }
  },
  "provisioningState": "Succeeded",
  "frontendIPConfiguration": {
    "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/frontendIPConfigurations/ip1"
  },
  "frontendPort": "3390",
  "backendPort": "3389",
  "enableFloatingIP": false,
  "idleTimeoutInMinutes": "4",
  "protocol": "Tcp",
  "backendIPConfiguration": {
    "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1"
  }
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "name": "natRule1.1",
  "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natRule1.1",
  "properties": {
    "provisioningState": "Succeeded",
    "frontendIPConfiguration": {
      "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/frontendIPConfigurations/ip1"
    },
    "frontendPort": "3390",
    "backendPort": "3389",
    "enableFloatingIP": false,
    "idleTimeoutInMinutes": "4",
    "protocol": "Tcp",
    "backendIPConfiguration": {
      "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1"
    }
  },
  "provisioningState": "Succeeded",
  "frontendIPConfiguration": {
    "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/frontendIPConfigurations/ip1"
  },
  "frontendPort": "3390",
  "backendPort": "3389",
  "enableFloatingIP": false,
  "idleTimeoutInMinutes": "4",
  "protocol": "Tcp",
  "backendIPConfiguration": {
    "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1"
  }
}
  ** CREATING FACT MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "natRule1.1",
  "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natRule1.1",
  "properties": {
    "provisioningState": "Succeeded",
    "frontendIPConfiguration": {
      "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/frontendIPConfigurations/ip1"
    },
    "frontendPort": "3390",
    "backendPort": "3389",
    "enableFloatingIP": false,
    "idleTimeoutInMinutes": "4",
    "protocol": "Tcp",
    "backendIPConfiguration": {
      "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1"
    }
  },
  "provisioningState": "Succeeded",
  "frontendIPConfiguration": {
    "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/frontendIPConfigurations/ip1"
  },
  "frontendPort": "3390",
  "backendPort": "3389",
  "enableFloatingIP": false,
  "idleTimeoutInMinutes": "4",
  "protocol": "Tcp",
  "backendIPConfiguration": {
    "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1"
  }
}
  resource name fields: inbound_nat_rule_name inbound_nat_rule_name name
------------------------------- Inbound Nat Rule
  list
  get
  ** CREATING FACT MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "rule1",
  "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/loadBalancingRules/rule1",
  "etag": "W/\\\"00000000-0000-0000-0000-000000000000\\\"",
  "properties": {
    "provisioningState": "Succeeded",
    "frontendIPConfiguration": {
      "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/frontendIPConfigurations/lbfrontend"
    },
    "frontendPort": "80",
    "backendPort": "80",
    "enableFloatingIP": false,
    "idleTimeoutInMinutes": "15",
    "protocol": "Tcp",
    "loadDistribution": "Default",
    "backendAddressPool": {
      "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/bepool1"
    },
    "probe": {
      "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/probes/probe1"
    }
  },
  "provisioningState": "Succeeded",
  "frontendIPConfiguration": {
    "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/frontendIPConfigurations/lbfrontend"
  },
  "frontendPort": "80",
  "backendPort": "80",
  "enableFloatingIP": false,
  "idleTimeoutInMinutes": "15",
  "protocol": "Tcp",
  "loadDistribution": "Default",
  "backendAddressPool": {
    "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/bepool1"
  },
  "probe": {
    "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/probes/probe1"
  }
}
  resource name fields: load_balancer_load_balancing_rule_name load_balancing_rule_name name
------------------------------- Load Balancer Load Balancing Rule
  list
------------------------------- Load Balancer Network Interface
  list
  get
  ** CREATING FACT MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "probe1",
  "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/probes/probe1",
  "etag": "W/\\\"00000000-0000-0000-0000-000000000000\\\"",
  "properties": {
    "provisioningState": "Succeeded",
    "protocol": "Http",
    "port": "80",
    "requestPath": "healthcheck.aspx",
    "intervalInSeconds": "15",
    "numberOfProbes": "2",
    "loadBalancingRules": [
      {
        "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
      }
    ]
  },
  "provisioningState": "Succeeded",
  "protocol": "Http",
  "port": "80",
  "requestPath": "healthcheck.aspx",
  "intervalInSeconds": "15",
  "numberOfProbes": "2",
  "loadBalancingRules": [
    {
      "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
    }
  ]
}
  resource name fields: load_balancer_probe_name probe_name name
------------------------------- Load Balancer Probe
  delete
  get
  create_or_update
  update_tags
  list_all
  list
  get_effective_route_table
  list_effective_network_security_groups
  list_virtual_machine_scale_set_vm_network_interfaces
  list_virtual_machine_scale_set_network_interfaces
  get_virtual_machine_scale_set_network_interface
  list_virtual_machine_scale_set_ip_configurations
  get_virtual_machine_scale_set_ip_configuration
  ** CREATING MAIN MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "test-nic",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic",
  "location": "eastus",
  "properties": {
    "provisioningState": "Succeeded",
    "ipConfigurations": [
      {
        "name": "ipconfig1",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic/ipConfigurations/ipconfig1",
        "properties": {
          "provisioningState": "Succeeded",
          "privateIPAddress": "172.20.2.4",
          "privateIPAllocationMethod": "Dynamic",
          "publicIPAddress": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"
          },
          "subnet": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"
          },
          "primary": true,
          "privateIPAddressVersion": "IPv4"
        }
      }
    ],
    "dnsSettings": {
      "dnsServers": [],
      "appliedDnsServers": [],
      "internalDomainNameSuffix": "test.bx.internal.cloudapp.net"
    },
    "macAddress": "00-0D-3A-1B-C7-21",
    "enableAcceleratedNetworking": true,
    "enableIPForwarding": false,
    "networkSecurityGroup": {
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg"
    },
    "primary": true,
    "virtualMachine": {
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1"
    }
  },
  "type": "Microsoft.Network/networkInterfaces",
  "provisioningState": "Succeeded",
  "ipConfigurations": [
    {
      "name": "ipconfig1",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic/ipConfigurations/ipconfig1",
      "properties": {
        "provisioningState": "Succeeded",
        "privateIPAddress": "172.20.2.4",
        "privateIPAllocationMethod": "Dynamic",
        "publicIPAddress": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"
        },
        "subnet": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"
        },
        "primary": true,
        "privateIPAddressVersion": "IPv4"
      }
    }
  ],
  "dnsSettings": {
    "dnsServers": [],
    "appliedDnsServers": [],
    "internalDomainNameSuffix": "test.bx.internal.cloudapp.net"
  },
  "macAddress": "00-0D-3A-1B-C7-21",
  "enableAcceleratedNetworking": true,
  "enableIPForwarding": false,
  "networkSecurityGroup": {
    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg"
  },
  "primary": true,
  "virtualMachine": {
    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1"
  }
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "name": "test-nic",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic",
  "location": "eastus",
  "properties": {
    "provisioningState": "Succeeded",
    "ipConfigurations": [
      {
        "name": "ipconfig1",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic/ipConfigurations/ipconfig1",
        "properties": {
          "provisioningState": "Succeeded",
          "privateIPAddress": "172.20.2.4",
          "privateIPAllocationMethod": "Dynamic",
          "publicIPAddress": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"
          },
          "subnet": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"
          },
          "primary": true,
          "privateIPAddressVersion": "IPv4"
        }
      }
    ],
    "dnsSettings": {
      "dnsServers": [],
      "appliedDnsServers": []
    },
    "enableAcceleratedNetworking": true,
    "enableIPForwarding": false
  },
  "type": "Microsoft.Network/networkInterfaces",
  "provisioningState": "Succeeded",
  "ipConfigurations": [
    {
      "name": "ipconfig1",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic/ipConfigurations/ipconfig1",
      "properties": {
        "provisioningState": "Succeeded",
        "privateIPAddress": "172.20.2.4",
        "privateIPAllocationMethod": "Dynamic",
        "publicIPAddress": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"
        },
        "subnet": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"
        },
        "primary": true,
        "privateIPAddressVersion": "IPv4"
      }
    }
  ],
  "dnsSettings": {
    "dnsServers": [],
    "appliedDnsServers": []
  },
  "enableAcceleratedNetworking": true,
  "enableIPForwarding": false
}
  ** CREATING FACT MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "test-nic",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic",
  "location": "eastus",
  "properties": {
    "provisioningState": "Succeeded",
    "ipConfigurations": [
      {
        "name": "ipconfig1",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic/ipConfigurations/ipconfig1",
        "properties": {
          "provisioningState": "Succeeded",
          "privateIPAddress": "172.20.2.4",
          "privateIPAllocationMethod": "Dynamic",
          "publicIPAddress": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"
          },
          "subnet": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"
          },
          "primary": true,
          "privateIPAddressVersion": "IPv4"
        }
      }
    ],
    "dnsSettings": {
      "dnsServers": [],
      "appliedDnsServers": [],
      "internalDomainNameSuffix": "test.bx.internal.cloudapp.net"
    },
    "macAddress": "00-0D-3A-1B-C7-21",
    "enableAcceleratedNetworking": true,
    "enableIPForwarding": false,
    "networkSecurityGroup": {
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg"
    },
    "primary": true,
    "virtualMachine": {
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1"
    }
  },
  "type": "Microsoft.Network/networkInterfaces",
  "provisioningState": "Succeeded",
  "ipConfigurations": [
    {
      "name": "ipconfig1",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic/ipConfigurations/ipconfig1",
      "properties": {
        "provisioningState": "Succeeded",
        "privateIPAddress": "172.20.2.4",
        "privateIPAllocationMethod": "Dynamic",
        "publicIPAddress": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"
        },
        "subnet": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"
        },
        "primary": true,
        "privateIPAddressVersion": "IPv4"
      }
    }
  ],
  "dnsSettings": {
    "dnsServers": [],
    "appliedDnsServers": [],
    "internalDomainNameSuffix": "test.bx.internal.cloudapp.net"
  },
  "macAddress": "00-0D-3A-1B-C7-21",
  "enableAcceleratedNetworking": true,
  "enableIPForwarding": false,
  "networkSecurityGroup": {
    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg"
  },
  "primary": true,
  "virtualMachine": {
    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1"
  }
}
  resource name fields: network_interface_name network_interface_name name
------------------------------- Network Interface
  list
  get
  ** CREATING FACT MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "ipconfig1",
  "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkInterfaces/mynic/ipConfigurations/ipconfig1",
  "etag": "W/\\\"00000000-0000-0000-0000-000000000000\\\"",
  "properties": {
    "provisioningState": "Succeeded",
    "privateIPAddress": "10.0.1.4",
    "privateIPAllocationMethod": "Dynamic",
    "subnet": {
      "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/frontendSubnet"
    },
    "privateIPAddressVersion": "IPv4",
    "loadBalancerBackendAddressPools": [
      {
        "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/backendAddressPools/bepool1"
      }
    ],
    "loadBalancerInboundNatRules": [
      {
        "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/inboundNatRules/inbound1"
      }
    ]
  },
  "provisioningState": "Succeeded",
  "privateIPAddress": "10.0.1.4",
  "privateIPAllocationMethod": "Dynamic",
  "subnet": {
    "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/frontendSubnet"
  },
  "privateIPAddressVersion": "IPv4",
  "loadBalancerBackendAddressPools": [
    {
      "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/backendAddressPools/bepool1"
    }
  ],
  "loadBalancerInboundNatRules": [
    {
      "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/inboundNatRules/inbound1"
    }
  ]
}
  resource name fields: network_interface_ip_configuration_name ip_configuration_name name
------------------------------- Network Interface I P Configuration
  list
------------------------------- Network Interface Load Balancer
  delete
  get
  create_or_update
  update_tags
  list_all
  list
  ** CREATING MAIN MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "testnsg",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg",
  "type": "Microsoft.Network/networkSecurityGroups",
  "location": "westus",
  "properties": {
    "provisioningState": "Succeeded",
    "securityRules": [
      {
        "name": "rule1",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/securityRules/rule1",
        "properties": {
          "provisioningState": "Succeeded",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "80",
          "sourceAddressPrefix": "*",
          "destinationAddressPrefix": "*",
          "access": "Allow",
          "priority": "130",
          "direction": "Inbound"
        }
      }
    ],
    "defaultSecurityRules": [
      {
        "name": "AllowVnetInBound",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetInBound",
        "properties": {
          "provisioningState": "Succeeded",
          "description": "Allow inbound traffic from all VMs in VNET",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "*",
          "sourceAddressPrefix": "VirtualNetwork",
          "destinationAddressPrefix": "VirtualNetwork",
          "access": "Allow",
          "priority": "65000",
          "direction": "Inbound"
        }
      },
      {
        "name": "AllowAzureLoadBalancerInBound",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowAzureLoadBalancerInBound",
        "properties": {
          "provisioningState": "Succeeded",
          "description": "Allow inbound traffic from azure load balancer",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "*",
          "sourceAddressPrefix": "AzureLoadBalancer",
          "destinationAddressPrefix": "*",
          "access": "Allow",
          "priority": "65001",
          "direction": "Inbound"
        }
      },
      {
        "name": "DenyAllInBound",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllInBound",
        "properties": {
          "provisioningState": "Succeeded",
          "description": "Deny all inbound traffic",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "*",
          "sourceAddressPrefix": "*",
          "destinationAddressPrefix": "*",
          "access": "Deny",
          "priority": "65500",
          "direction": "Inbound"
        }
      },
      {
        "name": "AllowVnetOutBound",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetOutBound",
        "properties": {
          "provisioningState": "Succeeded",
          "description": "Allow outbound traffic from all VMs to all VMs in VNET",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "*",
          "sourceAddressPrefix": "VirtualNetwork",
          "destinationAddressPrefix": "VirtualNetwork",
          "access": "Allow",
          "priority": "65000",
          "direction": "Outbound"
        }
      },
      {
        "name": "AllowInternetOutBound",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowInternetOutBound",
        "properties": {
          "provisioningState": "Succeeded",
          "description": "Allow outbound traffic from all VMs to Internet",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "*",
          "sourceAddressPrefix": "*",
          "destinationAddressPrefix": "Internet",
          "access": "Allow",
          "priority": "65001",
          "direction": "Outbound"
        }
      },
      {
        "name": "DenyAllOutBound",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllOutBound",
        "properties": {
          "provisioningState": "Succeeded",
          "description": "Deny all outbound traffic",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "*",
          "sourceAddressPrefix": "*",
          "destinationAddressPrefix": "*",
          "access": "Deny",
          "priority": "65500",
          "direction": "Outbound"
        }
      }
    ]
  },
  "provisioningState": "Succeeded",
  "securityRules": [
    {
      "name": "rule1",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/securityRules/rule1",
      "properties": {
        "provisioningState": "Succeeded",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "80",
        "sourceAddressPrefix": "*",
        "destinationAddressPrefix": "*",
        "access": "Allow",
        "priority": "130",
        "direction": "Inbound"
      }
    }
  ],
  "defaultSecurityRules": [
    {
      "name": "AllowVnetInBound",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetInBound",
      "properties": {
        "provisioningState": "Succeeded",
        "description": "Allow inbound traffic from all VMs in VNET",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "*",
        "sourceAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefix": "VirtualNetwork",
        "access": "Allow",
        "priority": "65000",
        "direction": "Inbound"
      }
    },
    {
      "name": "AllowAzureLoadBalancerInBound",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowAzureLoadBalancerInBound",
      "properties": {
        "provisioningState": "Succeeded",
        "description": "Allow inbound traffic from azure load balancer",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "*",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "destinationAddressPrefix": "*",
        "access": "Allow",
        "priority": "65001",
        "direction": "Inbound"
      }
    },
    {
      "name": "DenyAllInBound",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllInBound",
      "properties": {
        "provisioningState": "Succeeded",
        "description": "Deny all inbound traffic",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "*",
        "sourceAddressPrefix": "*",
        "destinationAddressPrefix": "*",
        "access": "Deny",
        "priority": "65500",
        "direction": "Inbound"
      }
    },
    {
      "name": "AllowVnetOutBound",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetOutBound",
      "properties": {
        "provisioningState": "Succeeded",
        "description": "Allow outbound traffic from all VMs to all VMs in VNET",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "*",
        "sourceAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefix": "VirtualNetwork",
        "access": "Allow",
        "priority": "65000",
        "direction": "Outbound"
      }
    },
    {
      "name": "AllowInternetOutBound",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowInternetOutBound",
      "properties": {
        "provisioningState": "Succeeded",
        "description": "Allow outbound traffic from all VMs to Internet",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "*",
        "sourceAddressPrefix": "*",
        "destinationAddressPrefix": "Internet",
        "access": "Allow",
        "priority": "65001",
        "direction": "Outbound"
      }
    },
    {
      "name": "DenyAllOutBound",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllOutBound",
      "properties": {
        "provisioningState": "Succeeded",
        "description": "Deny all outbound traffic",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "*",
        "sourceAddressPrefix": "*",
        "destinationAddressPrefix": "*",
        "access": "Deny",
        "priority": "65500",
        "direction": "Outbound"
      }
    }
  ]
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "name": "testnsg",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg",
  "type": "Microsoft.Network/networkSecurityGroups",
  "location": "westus",
  "properties": {
    "provisioningState": "Succeeded",
    "securityRules": [],
    "defaultSecurityRules": [
      {
        "name": "AllowVnetInBound",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetInBound",
        "properties": {
          "provisioningState": "Succeeded",
          "description": "Allow inbound traffic from all VMs in VNET",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "*",
          "sourceAddressPrefix": "VirtualNetwork",
          "destinationAddressPrefix": "VirtualNetwork",
          "access": "Allow",
          "priority": "65000",
          "direction": "Inbound"
        }
      },
      {
        "name": "AllowAzureLoadBalancerInBound",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowAzureLoadBalancerInBound",
        "properties": {
          "provisioningState": "Succeeded",
          "description": "Allow inbound traffic from azure load balancer",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "*",
          "sourceAddressPrefix": "AzureLoadBalancer",
          "destinationAddressPrefix": "*",
          "access": "Allow",
          "priority": "65001",
          "direction": "Inbound"
        }
      },
      {
        "name": "DenyAllInBound",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllInBound",
        "properties": {
          "provisioningState": "Succeeded",
          "description": "Deny all inbound traffic",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "*",
          "sourceAddressPrefix": "*",
          "destinationAddressPrefix": "*",
          "access": "Deny",
          "priority": "65500",
          "direction": "Inbound"
        }
      },
      {
        "name": "AllowVnetOutBound",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetOutBound",
        "properties": {
          "provisioningState": "Succeeded",
          "description": "Allow outbound traffic from all VMs to all VMs in VNET",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "*",
          "sourceAddressPrefix": "VirtualNetwork",
          "destinationAddressPrefix": "VirtualNetwork",
          "access": "Allow",
          "priority": "65000",
          "direction": "Outbound"
        }
      },
      {
        "name": "AllowInternetOutBound",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowInternetOutBound",
        "properties": {
          "provisioningState": "Succeeded",
          "description": "Allow outbound traffic from all VMs to Internet",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "*",
          "sourceAddressPrefix": "*",
          "destinationAddressPrefix": "Internet",
          "access": "Allow",
          "priority": "65001",
          "direction": "Outbound"
        }
      },
      {
        "name": "DenyAllOutBound",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllOutBound",
        "properties": {
          "provisioningState": "Succeeded",
          "description": "Deny all outbound traffic",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "*",
          "sourceAddressPrefix": "*",
          "destinationAddressPrefix": "*",
          "access": "Deny",
          "priority": "65500",
          "direction": "Outbound"
        }
      }
    ]
  },
  "provisioningState": "Succeeded",
  "securityRules": [],
  "defaultSecurityRules": [
    {
      "name": "AllowVnetInBound",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetInBound",
      "properties": {
        "provisioningState": "Succeeded",
        "description": "Allow inbound traffic from all VMs in VNET",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "*",
        "sourceAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefix": "VirtualNetwork",
        "access": "Allow",
        "priority": "65000",
        "direction": "Inbound"
      }
    },
    {
      "name": "AllowAzureLoadBalancerInBound",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowAzureLoadBalancerInBound",
      "properties": {
        "provisioningState": "Succeeded",
        "description": "Allow inbound traffic from azure load balancer",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "*",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "destinationAddressPrefix": "*",
        "access": "Allow",
        "priority": "65001",
        "direction": "Inbound"
      }
    },
    {
      "name": "DenyAllInBound",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllInBound",
      "properties": {
        "provisioningState": "Succeeded",
        "description": "Deny all inbound traffic",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "*",
        "sourceAddressPrefix": "*",
        "destinationAddressPrefix": "*",
        "access": "Deny",
        "priority": "65500",
        "direction": "Inbound"
      }
    },
    {
      "name": "AllowVnetOutBound",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetOutBound",
      "properties": {
        "provisioningState": "Succeeded",
        "description": "Allow outbound traffic from all VMs to all VMs in VNET",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "*",
        "sourceAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefix": "VirtualNetwork",
        "access": "Allow",
        "priority": "65000",
        "direction": "Outbound"
      }
    },
    {
      "name": "AllowInternetOutBound",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowInternetOutBound",
      "properties": {
        "provisioningState": "Succeeded",
        "description": "Allow outbound traffic from all VMs to Internet",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "*",
        "sourceAddressPrefix": "*",
        "destinationAddressPrefix": "Internet",
        "access": "Allow",
        "priority": "65001",
        "direction": "Outbound"
      }
    },
    {
      "name": "DenyAllOutBound",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllOutBound",
      "properties": {
        "provisioningState": "Succeeded",
        "description": "Deny all outbound traffic",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "*",
        "sourceAddressPrefix": "*",
        "destinationAddressPrefix": "*",
        "access": "Deny",
        "priority": "65500",
        "direction": "Outbound"
      }
    }
  ]
}
  ** CREATING FACT MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "testnsg",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg",
  "type": "Microsoft.Network/networkSecurityGroups",
  "location": "westus",
  "properties": {
    "provisioningState": "Succeeded",
    "securityRules": [
      {
        "name": "rule1",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/securityRules/rule1",
        "properties": {
          "provisioningState": "Succeeded",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "80",
          "sourceAddressPrefix": "*",
          "destinationAddressPrefix": "*",
          "access": "Allow",
          "priority": "130",
          "direction": "Inbound"
        }
      }
    ],
    "defaultSecurityRules": [
      {
        "name": "AllowVnetInBound",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetInBound",
        "properties": {
          "provisioningState": "Succeeded",
          "description": "Allow inbound traffic from all VMs in VNET",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "*",
          "sourceAddressPrefix": "VirtualNetwork",
          "destinationAddressPrefix": "VirtualNetwork",
          "access": "Allow",
          "priority": "65000",
          "direction": "Inbound"
        }
      },
      {
        "name": "AllowAzureLoadBalancerInBound",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowAzureLoadBalancerInBound",
        "properties": {
          "provisioningState": "Succeeded",
          "description": "Allow inbound traffic from azure load balancer",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "*",
          "sourceAddressPrefix": "AzureLoadBalancer",
          "destinationAddressPrefix": "*",
          "access": "Allow",
          "priority": "65001",
          "direction": "Inbound"
        }
      },
      {
        "name": "DenyAllInBound",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllInBound",
        "properties": {
          "provisioningState": "Succeeded",
          "description": "Deny all inbound traffic",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "*",
          "sourceAddressPrefix": "*",
          "destinationAddressPrefix": "*",
          "access": "Deny",
          "priority": "65500",
          "direction": "Inbound"
        }
      },
      {
        "name": "AllowVnetOutBound",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetOutBound",
        "properties": {
          "provisioningState": "Succeeded",
          "description": "Allow outbound traffic from all VMs to all VMs in VNET",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "*",
          "sourceAddressPrefix": "VirtualNetwork",
          "destinationAddressPrefix": "VirtualNetwork",
          "access": "Allow",
          "priority": "65000",
          "direction": "Outbound"
        }
      },
      {
        "name": "AllowInternetOutBound",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowInternetOutBound",
        "properties": {
          "provisioningState": "Succeeded",
          "description": "Allow outbound traffic from all VMs to Internet",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "*",
          "sourceAddressPrefix": "*",
          "destinationAddressPrefix": "Internet",
          "access": "Allow",
          "priority": "65001",
          "direction": "Outbound"
        }
      },
      {
        "name": "DenyAllOutBound",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllOutBound",
        "properties": {
          "provisioningState": "Succeeded",
          "description": "Deny all outbound traffic",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "*",
          "sourceAddressPrefix": "*",
          "destinationAddressPrefix": "*",
          "access": "Deny",
          "priority": "65500",
          "direction": "Outbound"
        }
      }
    ]
  },
  "provisioningState": "Succeeded",
  "securityRules": [
    {
      "name": "rule1",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/securityRules/rule1",
      "properties": {
        "provisioningState": "Succeeded",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "80",
        "sourceAddressPrefix": "*",
        "destinationAddressPrefix": "*",
        "access": "Allow",
        "priority": "130",
        "direction": "Inbound"
      }
    }
  ],
  "defaultSecurityRules": [
    {
      "name": "AllowVnetInBound",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetInBound",
      "properties": {
        "provisioningState": "Succeeded",
        "description": "Allow inbound traffic from all VMs in VNET",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "*",
        "sourceAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefix": "VirtualNetwork",
        "access": "Allow",
        "priority": "65000",
        "direction": "Inbound"
      }
    },
    {
      "name": "AllowAzureLoadBalancerInBound",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowAzureLoadBalancerInBound",
      "properties": {
        "provisioningState": "Succeeded",
        "description": "Allow inbound traffic from azure load balancer",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "*",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "destinationAddressPrefix": "*",
        "access": "Allow",
        "priority": "65001",
        "direction": "Inbound"
      }
    },
    {
      "name": "DenyAllInBound",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllInBound",
      "properties": {
        "provisioningState": "Succeeded",
        "description": "Deny all inbound traffic",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "*",
        "sourceAddressPrefix": "*",
        "destinationAddressPrefix": "*",
        "access": "Deny",
        "priority": "65500",
        "direction": "Inbound"
      }
    },
    {
      "name": "AllowVnetOutBound",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetOutBound",
      "properties": {
        "provisioningState": "Succeeded",
        "description": "Allow outbound traffic from all VMs to all VMs in VNET",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "*",
        "sourceAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefix": "VirtualNetwork",
        "access": "Allow",
        "priority": "65000",
        "direction": "Outbound"
      }
    },
    {
      "name": "AllowInternetOutBound",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowInternetOutBound",
      "properties": {
        "provisioningState": "Succeeded",
        "description": "Allow outbound traffic from all VMs to Internet",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "*",
        "sourceAddressPrefix": "*",
        "destinationAddressPrefix": "Internet",
        "access": "Allow",
        "priority": "65001",
        "direction": "Outbound"
      }
    },
    {
      "name": "DenyAllOutBound",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllOutBound",
      "properties": {
        "provisioningState": "Succeeded",
        "description": "Deny all outbound traffic",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "*",
        "sourceAddressPrefix": "*",
        "destinationAddressPrefix": "*",
        "access": "Deny",
        "priority": "65500",
        "direction": "Outbound"
      }
    }
  ]
}
  resource name fields: network_security_group_name network_security_group_name name
------------------------------- Network Security Group
  delete
  get
  create_or_update
  list
  ** CREATING MAIN MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "rule1",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/securityRules/rule1",
  "properties": {
    "provisioningState": "Succeeded",
    "protocol": "*",
    "sourcePortRange": "*",
    "destinationPortRange": "80",
    "sourceAddressPrefix": "*",
    "destinationAddressPrefix": "*",
    "access": "Allow",
    "priority": "130",
    "direction": "Inbound"
  },
  "provisioningState": "Succeeded",
  "protocol": "*",
  "sourcePortRange": "*",
  "destinationPortRange": "80",
  "sourceAddressPrefix": "*",
  "destinationAddressPrefix": "*",
  "access": "Allow",
  "priority": "130",
  "direction": "Inbound"
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "name": "rule1",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/securityRules/rule1",
  "properties": {
    "provisioningState": "Succeeded",
    "protocol": "*",
    "sourcePortRange": "*",
    "destinationPortRange": "8080",
    "sourceAddressPrefix": "10.0.0.0/8",
    "destinationAddressPrefix": "11.0.0.0/8",
    "access": "Deny",
    "priority": "100",
    "direction": "Outbound"
  },
  "provisioningState": "Succeeded",
  "protocol": "*",
  "sourcePortRange": "*",
  "destinationPortRange": "8080",
  "sourceAddressPrefix": "10.0.0.0/8",
  "destinationAddressPrefix": "11.0.0.0/8",
  "access": "Deny",
  "priority": "100",
  "direction": "Outbound"
}
  ** CREATING FACT MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "rule1",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/securityRules/rule1",
  "properties": {
    "provisioningState": "Succeeded",
    "protocol": "*",
    "sourcePortRange": "*",
    "destinationPortRange": "80",
    "sourceAddressPrefix": "*",
    "destinationAddressPrefix": "*",
    "access": "Allow",
    "priority": "130",
    "direction": "Inbound"
  },
  "provisioningState": "Succeeded",
  "protocol": "*",
  "sourcePortRange": "*",
  "destinationPortRange": "80",
  "sourceAddressPrefix": "*",
  "destinationAddressPrefix": "*",
  "access": "Allow",
  "priority": "130",
  "direction": "Inbound"
}
  resource name fields: security_rule_name security_rule_name name
------------------------------- Security Rule
  list
  get
  ** CREATING FACT MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "AllowVnetInBound",
  "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowVnetInBound",
  "properties": {
    "provisioningState": "Succeeded",
    "description": "Allow inbound traffic from all VMs in VNET",
    "protocol": "*",
    "sourcePortRange": "*",
    "destinationPortRange": "*",
    "sourceAddressPrefix": "VirtualNetwork",
    "destinationAddressPrefix": "VirtualNetwork",
    "access": "Allow",
    "priority": "65000",
    "direction": "Inbound",
    "sourcePortRanges": [],
    "destinationPortRanges": [],
    "sourceAddressPrefixes": [],
    "destinationAddressPrefixes": []
  },
  "provisioningState": "Succeeded",
  "description": "Allow inbound traffic from all VMs in VNET",
  "protocol": "*",
  "sourcePortRange": "*",
  "destinationPortRange": "*",
  "sourceAddressPrefix": "VirtualNetwork",
  "destinationAddressPrefix": "VirtualNetwork",
  "access": "Allow",
  "priority": "65000",
  "direction": "Inbound",
  "sourcePortRanges": [],
  "destinationPortRanges": [],
  "sourceAddressPrefixes": [],
  "destinationAddressPrefixes": []
}
  resource name fields: default_security_rule_name default_security_rule_name name
------------------------------- Default Security Rule
  create_or_update
  get
  delete
  update_tags
  list
  list_all
  get_topology
  verify_ip_flow
  get_next_hop
  get_vm_security_rules
  get_troubleshooting
  get_troubleshooting_result
  set_flow_log_configuration
  get_flow_log_status
  check_connectivity
  get_azure_reachability_report
  list_available_providers
  ** CREATING MAIN MODULE
Getting example for: get
Getting example for: create_or_update
  ** CREATING FACT MODULE
Getting example for: get
  resource name fields: network_watcher_name network_watcher_name name
------------------------------- Network Watcher
  create
  get
  delete
  stop
  get_status
  list
  ** CREATING MAIN MODULE
Getting example for: get
Getting example for: create
  ** CREATING FACT MODULE
Getting example for: get
  resource name fields: packet_capture_name packet_capture_name name
------------------------------- Packet Capture
  list
------------------------------- Operation
  delete
  get
  create_or_update
  update_tags
  list_all
  list
  list_virtual_machine_scale_set_public_ip_addresses
  list_virtual_machine_scale_set_vm_public_ip_addresses
  get_virtual_machine_scale_set_public_ip_address
  ** CREATING MAIN MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "testDNS-ip",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/testDNS-ip",
  "location": "westus",
  "properties": {
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Dynamic",
    "idleTimeoutInMinutes": "4",
    "ipConfiguration": {
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testDNS649/ipConfigurations/ipconfig1"
    }
  },
  "type": "Microsoft.Network/publicIPAddresses",
  "provisioningState": "Succeeded",
  "publicIPAddressVersion": "IPv4",
  "publicIPAllocationMethod": "Dynamic",
  "idleTimeoutInMinutes": "4",
  "ipConfiguration": {
    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testDNS649/ipConfigurations/ipconfig1"
  }
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "name": "testDNS-ip",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip",
  "location": "westus",
  "properties": {
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Dynamic",
    "idleTimeoutInMinutes": "4",
    "ipConfiguration": {
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testDNS649/ipConfigurations/ipconfig1"
    }
  },
  "sku": {
    "name": "Basic"
  },
  "type": "Microsoft.Network/publicIPAddresses",
  "provisioningState": "Succeeded",
  "publicIPAddressVersion": "IPv4",
  "publicIPAllocationMethod": "Dynamic",
  "idleTimeoutInMinutes": "4",
  "ipConfiguration": {
    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testDNS649/ipConfigurations/ipconfig1"
  }
}
  ** CREATING FACT MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "testDNS-ip",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/testDNS-ip",
  "location": "westus",
  "properties": {
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Dynamic",
    "idleTimeoutInMinutes": "4",
    "ipConfiguration": {
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testDNS649/ipConfigurations/ipconfig1"
    }
  },
  "type": "Microsoft.Network/publicIPAddresses",
  "provisioningState": "Succeeded",
  "publicIPAddressVersion": "IPv4",
  "publicIPAllocationMethod": "Dynamic",
  "idleTimeoutInMinutes": "4",
  "ipConfiguration": {
    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testDNS649/ipConfigurations/ipconfig1"
  }
}
  resource name fields: public_ip_addresse_name public_ip_address_name name
------------------------------- Public I P Addresse
  delete
  get
  create_or_update
  update
  list_by_resource_group
  list
  ** CREATING MAIN MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName",
  "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
  "location": "West US",
  "name": "filterName",
  "type": "Microsofot.Network/routeFilters",
  "tags": {
    "key1": "value1"
  },
  "properties": {
    "provisioningState": "Succeeded",
    "rules": [
      {
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "name": "ruleName",
        "properties": {
          "provisioningState": "Succeeded",
          "access": "Allow",
          "routeFilterRuleType": "Community",
          "communities": [
            "12076:5030",
            "12076:5040"
          ]
        }
      }
    ],
    "peerings": []
  },
  "provisioningState": "Succeeded",
  "rules": [
    {
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
      "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
      "name": "ruleName",
      "properties": {
        "provisioningState": "Succeeded",
        "access": "Allow",
        "routeFilterRuleType": "Community",
        "communities": [
          "12076:5030",
          "12076:5040"
        ]
      }
    }
  ],
  "peerings": []
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName",
  "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
  "location": "West US",
  "name": "filterName",
  "type": "Microsofot.Network/routeFilters",
  "tags": {
    "key1": "value1"
  },
  "properties": {
    "provisioningState": "Succeeded",
    "rules": [
      {
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "name": "ruleName",
        "properties": {
          "provisioningState": "Succeeded",
          "access": "Allow",
          "routeFilterRuleType": "Community",
          "communities": [
            "12076:5030",
            "12076:5040"
          ]
        }
      }
    ],
    "peerings": []
  },
  "provisioningState": "Succeeded",
  "rules": [
    {
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
      "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
      "name": "ruleName",
      "properties": {
        "provisioningState": "Succeeded",
        "access": "Allow",
        "routeFilterRuleType": "Community",
        "communities": [
          "12076:5030",
          "12076:5040"
        ]
      }
    }
  ],
  "peerings": []
}
Getting example for: update
Found example for: update
Found response for: update
Found properties
Sample after properties copied ---
{
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName",
  "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
  "location": "West US",
  "name": "filterName",
  "type": "Microsofot.Network/routeFilters",
  "tags": {
    "key1": "value1"
  },
  "properties": {
    "provisioningState": "Succeeded",
    "rules": [
      {
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "name": "ruleName",
        "properties": {
          "provisioningState": "Succeeded",
          "access": "Allow",
          "routeFilterRuleType": "Community",
          "communities": [
            "12076:5030"
          ]
        }
      }
    ],
    "peerings": []
  },
  "provisioningState": "Succeeded",
  "rules": [
    {
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
      "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
      "name": "ruleName",
      "properties": {
        "provisioningState": "Succeeded",
        "access": "Allow",
        "routeFilterRuleType": "Community",
        "communities": [
          "12076:5030"
        ]
      }
    }
  ],
  "peerings": []
}
  ** CREATING FACT MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName",
  "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
  "location": "West US",
  "name": "filterName",
  "type": "Microsofot.Network/routeFilters",
  "tags": {
    "key1": "value1"
  },
  "properties": {
    "provisioningState": "Succeeded",
    "rules": [
      {
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "name": "ruleName",
        "properties": {
          "provisioningState": "Succeeded",
          "access": "Allow",
          "routeFilterRuleType": "Community",
          "communities": [
            "12076:5030",
            "12076:5040"
          ]
        }
      }
    ],
    "peerings": []
  },
  "provisioningState": "Succeeded",
  "rules": [
    {
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
      "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
      "name": "ruleName",
      "properties": {
        "provisioningState": "Succeeded",
        "access": "Allow",
        "routeFilterRuleType": "Community",
        "communities": [
          "12076:5030",
          "12076:5040"
        ]
      }
    }
  ],
  "peerings": []
}
  resource name fields: route_filter_name route_filter_name name
------------------------------- Route Filter
  delete
  get
  create_or_update
  update
  list_by_route_filter
  ** CREATING MAIN MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
  "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
  "tags": {
    "key1": "value1"
  },
  "name": "ruleName",
  "properties": {
    "provisioningState": "Succeeded",
    "access": "Allow",
    "routeFilterRuleType": "Community",
    "communities": [
      "12076:5030",
      "12076:5040"
    ]
  },
  "provisioningState": "Succeeded",
  "access": "Allow",
  "routeFilterRuleType": "Community",
  "communities": [
    "12076:5030",
    "12076:5040"
  ]
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
  "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
  "tags": {
    "key1": "value1"
  },
  "name": "ruleName",
  "properties": {
    "provisioningState": "Succeeded",
    "access": "Allow",
    "routeFilterRuleType": "Community",
    "communities": [
      "12076:5030",
      "12076:5040"
    ]
  },
  "provisioningState": "Succeeded",
  "access": "Allow",
  "routeFilterRuleType": "Community",
  "communities": [
    "12076:5030",
    "12076:5040"
  ]
}
Getting example for: update
Found example for: update
Found response for: update
Found properties
Sample after properties copied ---
{
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
  "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
  "tags": {
    "key1": "value1"
  },
  "name": "ruleName",
  "properties": {
    "provisioningState": "Succeeded",
    "access": "Allow",
    "routeFilterRuleType": "Community",
    "communities": [
      "12076:5030",
      "12076:5040"
    ]
  },
  "provisioningState": "Succeeded",
  "access": "Allow",
  "routeFilterRuleType": "Community",
  "communities": [
    "12076:5030",
    "12076:5040"
  ]
}
  ** CREATING FACT MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
  "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
  "tags": {
    "key1": "value1"
  },
  "name": "ruleName",
  "properties": {
    "provisioningState": "Succeeded",
    "access": "Allow",
    "routeFilterRuleType": "Community",
    "communities": [
      "12076:5030",
      "12076:5040"
    ]
  },
  "provisioningState": "Succeeded",
  "access": "Allow",
  "routeFilterRuleType": "Community",
  "communities": [
    "12076:5030",
    "12076:5040"
  ]
}
  resource name fields: route_filter_rule_name rule_name name
------------------------------- Route Filter Rule
  delete
  get
  create_or_update
  update_tags
  list
  list_all
  ** CREATING MAIN MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "testrt",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt",
  "type": "Microsoft.Network/routeTables",
  "location": "westus",
  "properties": {
    "provisioningState": "Succeeded",
    "disableBgpRoutePropagation": false,
    "routes": [
      {
        "name": "route1",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt/routes/route1",
        "properties": {
          "provisioningState": "Succeeded",
          "addressPrefix": "10.0.3.0/24",
          "nextHopType": "VirtualNetworkGateway"
        }
      }
    ]
  },
  "provisioningState": "Succeeded",
  "disableBgpRoutePropagation": false,
  "routes": [
    {
      "name": "route1",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt/routes/route1",
      "properties": {
        "provisioningState": "Succeeded",
        "addressPrefix": "10.0.3.0/24",
        "nextHopType": "VirtualNetworkGateway"
      }
    }
  ]
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "name": "testrt",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt",
  "type": "Microsoft.Network/routeTables",
  "location": "westus",
  "properties": {
    "provisioningState": "Succeeded",
    "routes": [],
    "disableBgpRoutePropagation": true
  },
  "provisioningState": "Succeeded",
  "routes": [],
  "disableBgpRoutePropagation": true
}
  ** CREATING FACT MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "testrt",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt",
  "type": "Microsoft.Network/routeTables",
  "location": "westus",
  "properties": {
    "provisioningState": "Succeeded",
    "disableBgpRoutePropagation": false,
    "routes": [
      {
        "name": "route1",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt/routes/route1",
        "properties": {
          "provisioningState": "Succeeded",
          "addressPrefix": "10.0.3.0/24",
          "nextHopType": "VirtualNetworkGateway"
        }
      }
    ]
  },
  "provisioningState": "Succeeded",
  "disableBgpRoutePropagation": false,
  "routes": [
    {
      "name": "route1",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt/routes/route1",
      "properties": {
        "provisioningState": "Succeeded",
        "addressPrefix": "10.0.3.0/24",
        "nextHopType": "VirtualNetworkGateway"
      }
    }
  ]
}
  resource name fields: route_table_name route_table_name name
------------------------------- Route Table
  delete
  get
  create_or_update
  list
  ** CREATING MAIN MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "route1",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt/routes/route1",
  "properties": {
    "provisioningState": "Succeeded",
    "addressPrefix": "10.0.3.0/24",
    "nextHopType": "Internet"
  },
  "provisioningState": "Succeeded",
  "addressPrefix": "10.0.3.0/24",
  "nextHopType": "Internet"
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "name": "route1",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt/routes/route1",
  "properties": {
    "provisioningState": "Succeeded",
    "addressPrefix": "10.0.3.0/24",
    "nextHopType": "VirtualNetworkGateway"
  },
  "provisioningState": "Succeeded",
  "addressPrefix": "10.0.3.0/24",
  "nextHopType": "VirtualNetworkGateway"
}
  ** CREATING FACT MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "route1",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt/routes/route1",
  "properties": {
    "provisioningState": "Succeeded",
    "addressPrefix": "10.0.3.0/24",
    "nextHopType": "Internet"
  },
  "provisioningState": "Succeeded",
  "addressPrefix": "10.0.3.0/24",
  "nextHopType": "Internet"
}
  resource name fields: route_name route_name name
------------------------------- Route
  list
------------------------------- Bgp Service Community
  list
------------------------------- Usage
  delete
  get
  create_or_update
  update_tags
  list_all
  list
  check_ip_address_availability
  list_usage
  ** CREATING MAIN MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "test-vnet",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet",
  "type": "Microsoft.Network/virtualNetworks",
  "location": "westus",
  "properties": {
    "provisioningState": "Succeeded",
    "addressSpace": {
      "addressPrefixes": [
        "10.0.0.0/16"
      ]
    },
    "subnets": [
      {
        "name": "subnet1",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1",
        "properties": {
          "provisioningState": "Succeeded",
          "addressPrefix": "10.0.1.0/24",
          "ipConfigurations": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe"
            }
          ]
        }
      }
    ],
    "virtualNetworkPeerings": []
  },
  "provisioningState": "Succeeded",
  "addressSpace": {
    "addressPrefixes": [
      "10.0.0.0/16"
    ]
  },
  "subnets": [
    {
      "name": "subnet1",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1",
      "properties": {
        "provisioningState": "Succeeded",
        "addressPrefix": "10.0.1.0/24",
        "ipConfigurations": [
          {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe"
          }
        ]
      }
    }
  ],
  "virtualNetworkPeerings": []
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "name": "test-vnet",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet",
  "type": "Microsoft.Network/virtualNetworks",
  "location": "westus",
  "properties": {
    "provisioningState": "Succeeded",
    "addressSpace": {
      "addressPrefixes": [
        "10.0.0.0/16"
      ]
    },
    "subnets": [],
    "virtualNetworkPeerings": []
  },
  "provisioningState": "Succeeded",
  "addressSpace": {
    "addressPrefixes": [
      "10.0.0.0/16"
    ]
  },
  "subnets": [],
  "virtualNetworkPeerings": []
}
  ** CREATING FACT MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "name": "test-vnet",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet",
  "type": "Microsoft.Network/virtualNetworks",
  "location": "westus",
  "properties": {
    "provisioningState": "Succeeded",
    "addressSpace": {
      "addressPrefixes": [
        "10.0.0.0/16"
      ]
    },
    "subnets": [
      {
        "name": "subnet1",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1",
        "properties": {
          "provisioningState": "Succeeded",
          "addressPrefix": "10.0.1.0/24",
          "ipConfigurations": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe"
            }
          ]
        }
      }
    ],
    "virtualNetworkPeerings": []
  },
  "provisioningState": "Succeeded",
  "addressSpace": {
    "addressPrefixes": [
      "10.0.0.0/16"
    ]
  },
  "subnets": [
    {
      "name": "subnet1",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1",
      "properties": {
        "provisioningState": "Succeeded",
        "addressPrefix": "10.0.1.0/24",
        "ipConfigurations": [
          {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe"
          }
        ]
      }
    }
  ],
  "virtualNetworkPeerings": []
}
  resource name fields: virtual_network_name virtual_network_name name
------------------------------- Virtual Network
  delete
  get
  create_or_update
  list
  ** CREATING MAIN MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "id": "/subscriptions/subid/resourceGroups/subnet-test/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/subnet1",
  "name": "subnet1",
  "properties": {
    "addressPrefix": "10.0.0.0/16",
    "provisioningState": "Succeeded"
  },
  "addressPrefix": "10.0.0.0/16",
  "provisioningState": "Succeeded"
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "id": "/subscriptions/subid/resourceGroups/subnet-test/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/subnet1",
  "name": "subnet1",
  "properties": {
    "addressPrefix": "10.0.0.0/16",
    "provisioningState": "Succeeded"
  },
  "addressPrefix": "10.0.0.0/16",
  "provisioningState": "Succeeded"
}
  ** CREATING FACT MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "id": "/subscriptions/subid/resourceGroups/subnet-test/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/subnet1",
  "name": "subnet1",
  "properties": {
    "addressPrefix": "10.0.0.0/16",
    "provisioningState": "Succeeded"
  },
  "addressPrefix": "10.0.0.0/16",
  "provisioningState": "Succeeded"
}
  resource name fields: subnet_name subnet_name name
------------------------------- Subnet
  delete
  get
  create_or_update
  list
  ** CREATING MAIN MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "id": "/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet1/virtualNetworkPeerings/peer",
  "name": "peer",
  "properties": {
    "allowVirtualNetworkAccess": true,
    "allowForwardedTraffic": true,
    "allowGatewayTransit": false,
    "useRemoteGateways": false,
    "remoteVirtualNetwork": {
      "id": "/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"
    },
    "remoteAddressSpace": {
      "addressPrefixes": [
        "12.0.0.0/8"
      ]
    },
    "peeringState": "Initiated",
    "provisioningState": "Succeeded"
  },
  "allowVirtualNetworkAccess": true,
  "allowForwardedTraffic": true,
  "allowGatewayTransit": false,
  "useRemoteGateways": false,
  "remoteVirtualNetwork": {
    "id": "/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"
  },
  "remoteAddressSpace": {
    "addressPrefixes": [
      "12.0.0.0/8"
    ]
  },
  "peeringState": "Initiated",
  "provisioningState": "Succeeded"
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "id": "/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet1/virtualNetworkPeerings/peer",
  "name": "peer",
  "properties": {
    "allowVirtualNetworkAccess": true,
    "allowForwardedTraffic": true,
    "allowGatewayTransit": false,
    "useRemoteGateways": false,
    "remoteVirtualNetwork": {
      "id": "/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"
    },
    "remoteAddressSpace": {
      "addressPrefixes": [
        "12.0.0.0/8"
      ]
    },
    "peeringState": "Initiated",
    "provisioningState": "Succeeded"
  },
  "allowVirtualNetworkAccess": true,
  "allowForwardedTraffic": true,
  "allowGatewayTransit": false,
  "useRemoteGateways": false,
  "remoteVirtualNetwork": {
    "id": "/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"
  },
  "remoteAddressSpace": {
    "addressPrefixes": [
      "12.0.0.0/8"
    ]
  },
  "peeringState": "Initiated",
  "provisioningState": "Succeeded"
}
  ** CREATING FACT MODULE
Getting example for: get
Found example for: get
Found response for: get
Found properties
Sample after properties copied ---
{
  "id": "/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet1/virtualNetworkPeerings/peer",
  "name": "peer",
  "properties": {
    "allowVirtualNetworkAccess": true,
    "allowForwardedTraffic": true,
    "allowGatewayTransit": false,
    "useRemoteGateways": false,
    "remoteVirtualNetwork": {
      "id": "/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"
    },
    "remoteAddressSpace": {
      "addressPrefixes": [
        "12.0.0.0/8"
      ]
    },
    "peeringState": "Initiated",
    "provisioningState": "Succeeded"
  },
  "allowVirtualNetworkAccess": true,
  "allowForwardedTraffic": true,
  "allowGatewayTransit": false,
  "useRemoteGateways": false,
  "remoteVirtualNetwork": {
    "id": "/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"
  },
  "remoteAddressSpace": {
    "addressPrefixes": [
      "12.0.0.0/8"
    ]
  },
  "peeringState": "Initiated",
  "provisioningState": "Succeeded"
}
  resource name fields: virtual_network_peering_name virtual_network_peering_name name
------------------------------- Virtual Network Peering
  create_or_update
  get
  delete
  update_tags
  list
  list_connections
  reset
  generatevpnclientpackage
  generate_vpn_profile
  get_vpn_profile_package_url
  get_bgp_peer_status
  supported_vpn_devices
  get_learned_routes
  get_advertised_routes
  vpn_device_configuration_script
  ** CREATING MAIN MODULE
Getting example for: get
Getting example for: create_or_update
  ** CREATING FACT MODULE
Getting example for: get
  resource name fields: virtual_network_gateway_name virtual_network_gateway_name name
------------------------------- Virtual Network Gateway
  create_or_update
  get
  delete
  update_tags
  set_shared_key
  get_shared_key
  list
  reset_shared_key
  ** CREATING MAIN MODULE
Getting example for: get
Getting example for: create_or_update
  ** CREATING FACT MODULE
Getting example for: get
  resource name fields: virtual_network_gateway_connection_name virtual_network_gateway_connection_name name
------------------------------- Virtual Network Gateway Connection
  create_or_update
  get
  delete
  update_tags
  list
  ** CREATING MAIN MODULE
Getting example for: get
Getting example for: create_or_update
  ** CREATING FACT MODULE
Getting example for: get
  resource name fields: local_network_gateway_name local_network_gateway_name name
TWEAK: RENAMING resource_group_name -- A
TWEAK: RENAMING application_gateway_name -- A
TWEAK: RENAMING application_gateway_name -- A
