Getting example for: create_or_update
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "name": "test-asg",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationSecurityGroups/test-asg",
  "type": "Microsoft.Network/applicationSecurityGroups",
  "location": "westus",
  "properties": {
    "provisioningState": "Succeeded",
    "resourceGuid": "00000000-0000-0000-0000-000000000000"
  },
  "provisioningState": "Succeeded",
  "resourceGuid": "00000000-0000-0000-0000-000000000000"
}
Getting example for: create_or_update
Getting example for: create_or_update
Getting example for: create_or_update
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "name": "lb",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb",
  "type": "Microsoft.Network/loadBalancers",
  "location": "westus",
  "sku": {
    "name": "Basic"
  },
  "properties": {
    "provisioningState": "Succeeded",
    "frontendIPConfigurations": [
      {
        "name": "fe-lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
        "properties": {
          "provisioningState": "Succeeded",
          "privateIPAddress": "10.0.1.4",
          "privateIPAllocationMethod": "Dynamic",
          "subnet": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
          },
          "loadBalancingRules": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
            }
          ],
          "inboundNatRules": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"
            }
          ]
        }
      }
    ],
    "backendAddressPools": [
      {
        "name": "be-lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
        "properties": {
          "provisioningState": "Succeeded",
          "loadBalancingRules": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
            }
          ]
        }
      }
    ],
    "loadBalancingRules": [
      {
        "name": "rulelb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb",
        "properties": {
          "provisioningState": "Succeeded",
          "frontendIPConfiguration": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
          },
          "frontendPort": "80",
          "backendPort": "80",
          "enableFloatingIP": true,
          "idleTimeoutInMinutes": "15",
          "protocol": "Tcp",
          "loadDistribution": "Default",
          "backendAddressPool": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
          },
          "probe": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
          },
          "disableOutboundSnat": false
        }
      }
    ],
    "probes": [
      {
        "name": "probe-lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
        "properties": {
          "provisioningState": "Succeeded",
          "protocol": "Http",
          "port": "80",
          "requestPath": "healthcheck.aspx",
          "intervalInSeconds": "15",
          "numberOfProbes": "2",
          "loadBalancingRules": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
            }
          ]
        }
      }
    ],
    "inboundNatRules": [
      {
        "name": "in-nat-rule",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule",
        "properties": {
          "provisioningState": "Succeeded",
          "frontendIPConfiguration": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
          },
          "frontendPort": "3389",
          "backendPort": "3389",
          "enableFloatingIP": true,
          "idleTimeoutInMinutes": "15",
          "protocol": "Tcp"
        }
      }
    ],
    "outboundNatRules": [],
    "inboundNatPools": []
  },
  "provisioningState": "Succeeded",
  "frontendIPConfigurations": [
    {
      "name": "fe-lb",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
      "properties": {
        "provisioningState": "Succeeded",
        "privateIPAddress": "10.0.1.4",
        "privateIPAllocationMethod": "Dynamic",
        "subnet": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
        },
        "loadBalancingRules": [
          {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
          }
        ],
        "inboundNatRules": [
          {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"
          }
        ]
      }
    }
  ],
  "backendAddressPools": [
    {
      "name": "be-lb",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
      "properties": {
        "provisioningState": "Succeeded",
        "loadBalancingRules": [
          {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
          }
        ]
      }
    }
  ],
  "loadBalancingRules": [
    {
      "name": "rulelb",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb",
      "properties": {
        "provisioningState": "Succeeded",
        "frontendIPConfiguration": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
        },
        "frontendPort": "80",
        "backendPort": "80",
        "enableFloatingIP": true,
        "idleTimeoutInMinutes": "15",
        "protocol": "Tcp",
        "loadDistribution": "Default",
        "backendAddressPool": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
        },
        "probe": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
        },
        "disableOutboundSnat": false
      }
    }
  ],
  "probes": [
    {
      "name": "probe-lb",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
      "properties": {
        "provisioningState": "Succeeded",
        "protocol": "Http",
        "port": "80",
        "requestPath": "healthcheck.aspx",
        "intervalInSeconds": "15",
        "numberOfProbes": "2",
        "loadBalancingRules": [
          {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
          }
        ]
      }
    }
  ],
  "inboundNatRules": [
    {
      "name": "in-nat-rule",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule",
      "properties": {
        "provisioningState": "Succeeded",
        "frontendIPConfiguration": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
        },
        "frontendPort": "3389",
        "backendPort": "3389",
        "enableFloatingIP": true,
        "idleTimeoutInMinutes": "15",
        "protocol": "Tcp"
      }
    }
  ],
  "outboundNatRules": [],
  "inboundNatPools": []
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "name": "natRule1.1",
  "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natRule1.1",
  "properties": {
    "provisioningState": "Succeeded",
    "frontendIPConfiguration": {
      "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/frontendIPConfigurations/ip1"
    },
    "frontendPort": "3390",
    "backendPort": "3389",
    "enableFloatingIP": false,
    "idleTimeoutInMinutes": "4",
    "protocol": "Tcp",
    "backendIPConfiguration": {
      "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1"
    }
  },
  "provisioningState": "Succeeded",
  "frontendIPConfiguration": {
    "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/frontendIPConfigurations/ip1"
  },
  "frontendPort": "3390",
  "backendPort": "3389",
  "enableFloatingIP": false,
  "idleTimeoutInMinutes": "4",
  "protocol": "Tcp",
  "backendIPConfiguration": {
    "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1"
  }
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "name": "test-nic",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic",
  "location": "eastus",
  "properties": {
    "provisioningState": "Succeeded",
    "ipConfigurations": [
      {
        "name": "ipconfig1",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic/ipConfigurations/ipconfig1",
        "properties": {
          "provisioningState": "Succeeded",
          "privateIPAddress": "172.20.2.4",
          "privateIPAllocationMethod": "Dynamic",
          "publicIPAddress": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"
          },
          "subnet": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"
          },
          "primary": true,
          "privateIPAddressVersion": "IPv4"
        }
      }
    ],
    "dnsSettings": {
      "dnsServers": [],
      "appliedDnsServers": []
    },
    "enableAcceleratedNetworking": true,
    "enableIPForwarding": false
  },
  "type": "Microsoft.Network/networkInterfaces",
  "provisioningState": "Succeeded",
  "ipConfigurations": [
    {
      "name": "ipconfig1",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic/ipConfigurations/ipconfig1",
      "properties": {
        "provisioningState": "Succeeded",
        "privateIPAddress": "172.20.2.4",
        "privateIPAllocationMethod": "Dynamic",
        "publicIPAddress": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"
        },
        "subnet": {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"
        },
        "primary": true,
        "privateIPAddressVersion": "IPv4"
      }
    }
  ],
  "dnsSettings": {
    "dnsServers": [],
    "appliedDnsServers": []
  },
  "enableAcceleratedNetworking": true,
  "enableIPForwarding": false
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "name": "testnsg",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg",
  "type": "Microsoft.Network/networkSecurityGroups",
  "location": "westus",
  "properties": {
    "provisioningState": "Succeeded",
    "securityRules": [],
    "defaultSecurityRules": [
      {
        "name": "AllowVnetInBound",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetInBound",
        "properties": {
          "provisioningState": "Succeeded",
          "description": "Allow inbound traffic from all VMs in VNET",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "*",
          "sourceAddressPrefix": "VirtualNetwork",
          "destinationAddressPrefix": "VirtualNetwork",
          "access": "Allow",
          "priority": "65000",
          "direction": "Inbound"
        }
      },
      {
        "name": "AllowAzureLoadBalancerInBound",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowAzureLoadBalancerInBound",
        "properties": {
          "provisioningState": "Succeeded",
          "description": "Allow inbound traffic from azure load balancer",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "*",
          "sourceAddressPrefix": "AzureLoadBalancer",
          "destinationAddressPrefix": "*",
          "access": "Allow",
          "priority": "65001",
          "direction": "Inbound"
        }
      },
      {
        "name": "DenyAllInBound",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllInBound",
        "properties": {
          "provisioningState": "Succeeded",
          "description": "Deny all inbound traffic",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "*",
          "sourceAddressPrefix": "*",
          "destinationAddressPrefix": "*",
          "access": "Deny",
          "priority": "65500",
          "direction": "Inbound"
        }
      },
      {
        "name": "AllowVnetOutBound",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetOutBound",
        "properties": {
          "provisioningState": "Succeeded",
          "description": "Allow outbound traffic from all VMs to all VMs in VNET",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "*",
          "sourceAddressPrefix": "VirtualNetwork",
          "destinationAddressPrefix": "VirtualNetwork",
          "access": "Allow",
          "priority": "65000",
          "direction": "Outbound"
        }
      },
      {
        "name": "AllowInternetOutBound",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowInternetOutBound",
        "properties": {
          "provisioningState": "Succeeded",
          "description": "Allow outbound traffic from all VMs to Internet",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "*",
          "sourceAddressPrefix": "*",
          "destinationAddressPrefix": "Internet",
          "access": "Allow",
          "priority": "65001",
          "direction": "Outbound"
        }
      },
      {
        "name": "DenyAllOutBound",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllOutBound",
        "properties": {
          "provisioningState": "Succeeded",
          "description": "Deny all outbound traffic",
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "*",
          "sourceAddressPrefix": "*",
          "destinationAddressPrefix": "*",
          "access": "Deny",
          "priority": "65500",
          "direction": "Outbound"
        }
      }
    ]
  },
  "provisioningState": "Succeeded",
  "securityRules": [],
  "defaultSecurityRules": [
    {
      "name": "AllowVnetInBound",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetInBound",
      "properties": {
        "provisioningState": "Succeeded",
        "description": "Allow inbound traffic from all VMs in VNET",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "*",
        "sourceAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefix": "VirtualNetwork",
        "access": "Allow",
        "priority": "65000",
        "direction": "Inbound"
      }
    },
    {
      "name": "AllowAzureLoadBalancerInBound",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowAzureLoadBalancerInBound",
      "properties": {
        "provisioningState": "Succeeded",
        "description": "Allow inbound traffic from azure load balancer",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "*",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "destinationAddressPrefix": "*",
        "access": "Allow",
        "priority": "65001",
        "direction": "Inbound"
      }
    },
    {
      "name": "DenyAllInBound",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllInBound",
      "properties": {
        "provisioningState": "Succeeded",
        "description": "Deny all inbound traffic",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "*",
        "sourceAddressPrefix": "*",
        "destinationAddressPrefix": "*",
        "access": "Deny",
        "priority": "65500",
        "direction": "Inbound"
      }
    },
    {
      "name": "AllowVnetOutBound",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetOutBound",
      "properties": {
        "provisioningState": "Succeeded",
        "description": "Allow outbound traffic from all VMs to all VMs in VNET",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "*",
        "sourceAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefix": "VirtualNetwork",
        "access": "Allow",
        "priority": "65000",
        "direction": "Outbound"
      }
    },
    {
      "name": "AllowInternetOutBound",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowInternetOutBound",
      "properties": {
        "provisioningState": "Succeeded",
        "description": "Allow outbound traffic from all VMs to Internet",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "*",
        "sourceAddressPrefix": "*",
        "destinationAddressPrefix": "Internet",
        "access": "Allow",
        "priority": "65001",
        "direction": "Outbound"
      }
    },
    {
      "name": "DenyAllOutBound",
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllOutBound",
      "properties": {
        "provisioningState": "Succeeded",
        "description": "Deny all outbound traffic",
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange": "*",
        "sourceAddressPrefix": "*",
        "destinationAddressPrefix": "*",
        "access": "Deny",
        "priority": "65500",
        "direction": "Outbound"
      }
    }
  ]
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "name": "rule1",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/securityRules/rule1",
  "properties": {
    "provisioningState": "Succeeded",
    "protocol": "*",
    "sourcePortRange": "*",
    "destinationPortRange": "8080",
    "sourceAddressPrefix": "10.0.0.0/8",
    "destinationAddressPrefix": "11.0.0.0/8",
    "access": "Deny",
    "priority": "100",
    "direction": "Outbound"
  },
  "provisioningState": "Succeeded",
  "protocol": "*",
  "sourcePortRange": "*",
  "destinationPortRange": "8080",
  "sourceAddressPrefix": "10.0.0.0/8",
  "destinationAddressPrefix": "11.0.0.0/8",
  "access": "Deny",
  "priority": "100",
  "direction": "Outbound"
}
Getting example for: create_or_update
Getting example for: create
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "name": "testDNS-ip",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip",
  "location": "westus",
  "properties": {
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Dynamic",
    "idleTimeoutInMinutes": "4",
    "ipConfiguration": {
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testDNS649/ipConfigurations/ipconfig1"
    }
  },
  "sku": {
    "name": "Basic"
  },
  "type": "Microsoft.Network/publicIPAddresses",
  "provisioningState": "Succeeded",
  "publicIPAddressVersion": "IPv4",
  "publicIPAllocationMethod": "Dynamic",
  "idleTimeoutInMinutes": "4",
  "ipConfiguration": {
    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testDNS649/ipConfigurations/ipconfig1"
  }
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName",
  "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
  "location": "West US",
  "name": "filterName",
  "type": "Microsofot.Network/routeFilters",
  "tags": {
    "key1": "value1"
  },
  "properties": {
    "provisioningState": "Succeeded",
    "rules": [
      {
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "name": "ruleName",
        "properties": {
          "provisioningState": "Succeeded",
          "access": "Allow",
          "routeFilterRuleType": "Community",
          "communities": [
            "12076:5030",
            "12076:5040"
          ]
        }
      }
    ],
    "peerings": []
  },
  "provisioningState": "Succeeded",
  "rules": [
    {
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
      "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
      "name": "ruleName",
      "properties": {
        "provisioningState": "Succeeded",
        "access": "Allow",
        "routeFilterRuleType": "Community",
        "communities": [
          "12076:5030",
          "12076:5040"
        ]
      }
    }
  ],
  "peerings": []
}
Getting example for: update
Found example for: update
Found response for: update
Found properties
Sample after properties copied ---
{
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName",
  "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
  "location": "West US",
  "name": "filterName",
  "type": "Microsofot.Network/routeFilters",
  "tags": {
    "key1": "value1"
  },
  "properties": {
    "provisioningState": "Succeeded",
    "rules": [
      {
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "name": "ruleName",
        "properties": {
          "provisioningState": "Succeeded",
          "access": "Allow",
          "routeFilterRuleType": "Community",
          "communities": [
            "12076:5030"
          ]
        }
      }
    ],
    "peerings": []
  },
  "provisioningState": "Succeeded",
  "rules": [
    {
      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
      "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
      "name": "ruleName",
      "properties": {
        "provisioningState": "Succeeded",
        "access": "Allow",
        "routeFilterRuleType": "Community",
        "communities": [
          "12076:5030"
        ]
      }
    }
  ],
  "peerings": []
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
  "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
  "tags": {
    "key1": "value1"
  },
  "name": "ruleName",
  "properties": {
    "provisioningState": "Succeeded",
    "access": "Allow",
    "routeFilterRuleType": "Community",
    "communities": [
      "12076:5030",
      "12076:5040"
    ]
  },
  "provisioningState": "Succeeded",
  "access": "Allow",
  "routeFilterRuleType": "Community",
  "communities": [
    "12076:5030",
    "12076:5040"
  ]
}
Getting example for: update
Found example for: update
Found response for: update
Found properties
Sample after properties copied ---
{
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
  "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
  "tags": {
    "key1": "value1"
  },
  "name": "ruleName",
  "properties": {
    "provisioningState": "Succeeded",
    "access": "Allow",
    "routeFilterRuleType": "Community",
    "communities": [
      "12076:5030",
      "12076:5040"
    ]
  },
  "provisioningState": "Succeeded",
  "access": "Allow",
  "routeFilterRuleType": "Community",
  "communities": [
    "12076:5030",
    "12076:5040"
  ]
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "name": "testrt",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt",
  "type": "Microsoft.Network/routeTables",
  "location": "westus",
  "properties": {
    "provisioningState": "Succeeded",
    "routes": [],
    "disableBgpRoutePropagation": true
  },
  "provisioningState": "Succeeded",
  "routes": [],
  "disableBgpRoutePropagation": true
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "name": "route1",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt/routes/route1",
  "properties": {
    "provisioningState": "Succeeded",
    "addressPrefix": "10.0.3.0/24",
    "nextHopType": "VirtualNetworkGateway"
  },
  "provisioningState": "Succeeded",
  "addressPrefix": "10.0.3.0/24",
  "nextHopType": "VirtualNetworkGateway"
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "name": "test-vnet",
  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet",
  "type": "Microsoft.Network/virtualNetworks",
  "location": "westus",
  "properties": {
    "provisioningState": "Succeeded",
    "addressSpace": {
      "addressPrefixes": [
        "10.0.0.0/16"
      ]
    },
    "subnets": [],
    "virtualNetworkPeerings": []
  },
  "provisioningState": "Succeeded",
  "addressSpace": {
    "addressPrefixes": [
      "10.0.0.0/16"
    ]
  },
  "subnets": [],
  "virtualNetworkPeerings": []
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "id": "/subscriptions/subid/resourceGroups/subnet-test/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/subnet1",
  "name": "subnet1",
  "properties": {
    "addressPrefix": "10.0.0.0/16",
    "provisioningState": "Succeeded"
  },
  "addressPrefix": "10.0.0.0/16",
  "provisioningState": "Succeeded"
}
Getting example for: create_or_update
Found example for: create_or_update
Found response for: create_or_update
Found properties
Sample after properties copied ---
{
  "id": "/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet1/virtualNetworkPeerings/peer",
  "name": "peer",
  "properties": {
    "allowVirtualNetworkAccess": true,
    "allowForwardedTraffic": true,
    "allowGatewayTransit": false,
    "useRemoteGateways": false,
    "remoteVirtualNetwork": {
      "id": "/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"
    },
    "remoteAddressSpace": {
      "addressPrefixes": [
        "12.0.0.0/8"
      ]
    },
    "peeringState": "Initiated",
    "provisioningState": "Succeeded"
  },
  "allowVirtualNetworkAccess": true,
  "allowForwardedTraffic": true,
  "allowGatewayTransit": false,
  "useRemoteGateways": false,
  "remoteVirtualNetwork": {
    "id": "/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"
  },
  "remoteAddressSpace": {
    "addressPrefixes": [
      "12.0.0.0/8"
    ]
  },
  "peeringState": "Initiated",
  "provisioningState": "Succeeded"
}
Getting example for: create_or_update
Getting example for: create_or_update
Getting example for: create_or_update
